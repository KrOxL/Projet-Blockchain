{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useContractCall, useContractFunction } from \"@usedapp/core\";\nimport { Interface } from \"@ethersproject/abi\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { abi } from \"../Parking.json\";\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || \"\";\nconst contractInterface = new Interface(abi);\nconst contract = new Contract(CONTRACT_ADDRESS, contractInterface);\n\nconst useContractFetch = function (method) {\n  _s();\n\n  let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useContractCall({\n    abi: contractInterface,\n    address: CONTRACT_ADDRESS,\n    args,\n    method\n  }) || [];\n};\n\n_s(useContractFetch, \"CyeqBowMBQuAu1HzqGLZIvpyK4g=\", false, function () {\n  return [useContractCall];\n});\n\nconst useContract = function (method) {\n  _s2();\n\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useContractFunction(contract, method, options);\n};\n\n_s2(useContract, \"M5QSvsHvvMZ/F4iZOYpxGANGV/4=\", false, function () {\n  return [useContractFunction];\n});\n\nexport const useGetOwner = () => {\n  _s3();\n\n  const [owner] = useContractFetch(\"owner\");\n  return owner;\n};\n\n_s3(useGetOwner, \"MrivraWTR6kunn/1PzxargOiRe8=\", false, function () {\n  return [useContractFetch];\n});\n\nexport const useGetZonePrice = zone => {\n  _s4();\n\n  const [price] = useContractFetch(\"zonePricePerMinute\", [zone]);\n  return price || BigNumber.from(0);\n};\n\n_s4(useGetZonePrice, \"VYESO8hObsj9w3RvL9BGV6jAknA=\", false, function () {\n  return [useContractFetch];\n});\n\nexport const useGetTicketInfo = plate => {\n  _s5();\n\n  const [expiration, zone] = useContractFetch(\"getTicket\", [plate]);\n  return {\n    expiration: expiration ? expiration.toNumber() : undefined,\n    zone\n  };\n};\n\n_s5(useGetTicketInfo, \"M+OVz+RBcTvT1GxBhG4ZN9It21s=\", false, function () {\n  return [useContractFetch];\n});\n\nexport const useCustomContractFunction = method => {\n  _s6();\n\n  const {\n    state,\n    send\n  } = useContract(method);\n  const [tx, setTx] = useState(state);\n  useEffect(() => {\n    setTx(state);\n  }, [state]);\n  return [tx, () => setTx({\n    status: \"None\"\n  }), send];\n};\n\n_s6(useCustomContractFunction, \"GxaDZ/oropG3IE8u6mVsQI5MOjs=\", false, function () {\n  return [useContract];\n});","map":{"version":3,"sources":["D:/Blockchain/GoerliTry/blockchain-developer-bootcamp-final-project/frontend/src/hooks/useContractHooks.ts"],"names":["useState","useEffect","useContractCall","useContractFunction","Interface","Contract","BigNumber","abi","CONTRACT_ADDRESS","process","env","REACT_APP_CONTRACT_ADDRESS","contractInterface","contract","useContractFetch","method","args","address","useContract","options","useGetOwner","owner","useGetZonePrice","zone","price","from","useGetTicketInfo","plate","expiration","toNumber","undefined","useCustomContractFunction","state","send","tx","setTx","status"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAwE,eAAxE;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,GAAT,QAAoB,iBAApB;AAGA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAAZ,IAA0C,EAAnE;AAEA,MAAMC,iBAAiB,GAAG,IAAIR,SAAJ,CAAcG,GAAd,CAA1B;AACA,MAAMM,QAAQ,GAAG,IAAIR,QAAJ,CAAaG,gBAAb,EAA+BI,iBAA/B,CAAjB;;AAEA,MAAME,gBAAgB,GAAG,UAACC,MAAD;AAAA;;AAAA,MAAiBC,IAAjB,uEAA+B,EAA/B;AAAA,SACvBd,eAAe,CAAC;AAAEK,IAAAA,GAAG,EAAEK,iBAAP;AAA0BK,IAAAA,OAAO,EAAET,gBAAnC;AAAqDQ,IAAAA,IAArD;AAA2DD,IAAAA;AAA3D,GAAD,CAAf,IAAwF,EADjE;AAAA,CAAzB;;GAAMD,gB;UACJZ,e;;;AAEF,MAAMgB,WAAW,GAAG,UAACH,MAAD;AAAA;;AAAA,MAAiBI,OAAjB,uEAAmC,EAAnC;AAAA,SAA0ChB,mBAAmB,CAACU,QAAD,EAAWE,MAAX,EAAmBI,OAAnB,CAA7D;AAAA,CAApB;;IAAMD,W;UAAwDf,mB;;;AAE9D,OAAO,MAAMiB,WAAW,GAAG,MAA0B;AAAA;;AACnD,QAAM,CAACC,KAAD,IAAUP,gBAAgB,CAAC,OAAD,CAAhC;AACA,SAAOO,KAAP;AACD,CAHM;;IAAMD,W;UACKN,gB;;;AAIlB,OAAO,MAAMQ,eAAe,GAAIC,IAAD,IAA2B;AAAA;;AACxD,QAAM,CAACC,KAAD,IAAUV,gBAAgB,CAAC,oBAAD,EAAuB,CAACS,IAAD,CAAvB,CAAhC;AACA,SAAOC,KAAK,IAAIlB,SAAS,CAACmB,IAAV,CAAe,CAAf,CAAhB;AACD,CAHM;;IAAMH,e;UACKR,gB;;;AAIlB,OAAO,MAAMY,gBAAgB,GAAIC,KAAD,IAAuD;AAAA;;AACrF,QAAM,CAACC,UAAD,EAAaL,IAAb,IAAqBT,gBAAgB,CAAC,WAAD,EAAc,CAACa,KAAD,CAAd,CAA3C;AACA,SAAO;AAAEC,IAAAA,UAAU,EAAEA,UAAU,GAAGA,UAAU,CAACC,QAAX,EAAH,GAA2BC,SAAnD;AAA8DP,IAAAA;AAA9D,GAAP;AACD,CAHM;;IAAMG,gB;UACgBZ,gB;;;AA2B7B,OAAO,MAAMiB,yBAAyB,GACpChB,MADuC,IAEe;AAAA;;AACtD,QAAM;AAAEiB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBf,WAAW,CAACH,MAAD,CAAnC;AACA,QAAM,CAACmB,EAAD,EAAKC,KAAL,IAAcnC,QAAQ,CAACgC,KAAD,CAA5B;AAEA/B,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,KAAK,CAACH,KAAD,CAAL;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,SAAO,CAACE,EAAD,EAAK,MAAMC,KAAK,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAhB,EAAsCH,IAAtC,CAAP;AACD,CAXM;;IAAMF,yB;UAGab,W","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useContractCall, useContractFunction, TransactionStatus } from \"@usedapp/core\";\r\nimport { Interface } from \"@ethersproject/abi\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\n\r\nimport { abi } from \"../Parking.json\";\r\nimport { Zone } from \"../constants\";\r\n\r\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || \"\";\r\n\r\nconst contractInterface = new Interface(abi);\r\nconst contract = new Contract(CONTRACT_ADDRESS, contractInterface);\r\n\r\nconst useContractFetch = (method: string, args: any[] = []) =>\r\n  useContractCall({ abi: contractInterface, address: CONTRACT_ADDRESS, args, method }) || [];\r\n\r\nconst useContract = (method: string, options: object = {}) => useContractFunction(contract, method, options);\r\n\r\nexport const useGetOwner = (): string | undefined => {\r\n  const [owner] = useContractFetch(\"owner\");\r\n  return owner;\r\n};\r\n\r\nexport const useGetZonePrice = (zone: Zone): BigNumber => {\r\n  const [price] = useContractFetch(\"zonePricePerMinute\", [zone]);\r\n  return price || BigNumber.from(0);\r\n};\r\n\r\nexport const useGetTicketInfo = (plate: string): { expiration: number; zone: Zone } => {\r\n  const [expiration, zone] = useContractFetch(\"getTicket\", [plate]);\r\n  return { expiration: expiration ? expiration.toNumber() : undefined, zone };\r\n};\r\n\r\ntype UseSetZonePrice = (price: BigNumber, zone: Zone) => Promise<void>;\r\ntype UseBuyTicket = (plate: string, duration: number, zone: Zone, value: { value: BigNumber }) => Promise<void>;\r\ntype UseCancelTicket = (plate: string) => Promise<void>;\r\ntype UseTransferTicket = (oldPlate: string, newPlate: string, newOwner: string) => Promise<void>;\r\ntype UseWithdrawType = (amount: BigNumber) => Promise<void>;\r\n\r\ntype Withdraw = \"withdraw\";\r\ntype BuyTicket = \"buyTicket\";\r\ntype CancelTicket = \"cancelTicket\";\r\ntype SetZonePrice = \"changeZonePrice\";\r\ntype TransferTicket = \"transferTicket\";\r\ntype TransactionTypes = Withdraw | BuyTicket | CancelTicket | SetZonePrice | TransferTicket;\r\n\r\ntype WithdrawOrBuy<T extends TransactionTypes> = T extends Withdraw\r\n  ? UseWithdrawType\r\n  : T extends BuyTicket\r\n  ? UseBuyTicket\r\n  : T extends SetZonePrice\r\n  ? UseSetZonePrice\r\n  : T extends TransferTicket\r\n  ? UseTransferTicket\r\n  : UseCancelTicket;\r\n\r\nexport const useCustomContractFunction = <T extends TransactionTypes>(\r\n  method: T\r\n): [TransactionStatus, () => void, WithdrawOrBuy<T>] => {\r\n  const { state, send } = useContract(method);\r\n  const [tx, setTx] = useState(state);\r\n\r\n  useEffect(() => {\r\n    setTx(state);\r\n  }, [state]);\r\n\r\n  return [tx, () => setTx({ status: \"None\" }), send];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}